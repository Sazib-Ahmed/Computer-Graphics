

#include <windows.h> // for MS Windows
#include <GL/glut.h> // GLUT, include glu.h and gl.h
#include<math.h>>
# define PI           3.14159265358979323846
/* Handler for window-repaint event. Call back when the window first appears and
whenever the window needs to be re-painted. */
void renderBitmapString(float x, float y, float z, void *font, char *string) {
    char *c;
    glRasterPos3f(x, y,z);
    for (c=string; *c != '\0'; c++)
    {
        glutBitmapCharacter(font, *c);
    }
}

void display() {
glClearColor(0.31f, 0.84f, 1.0f, 0.0f); // Set background color to black and opaque
glClear(GL_COLOR_BUFFER_BIT); // Clear the color buffer (background)
/// glColor3f(0.0,0.0,0.0);
///renderBitmapString(0.0f, 0.0f, 0.0f, GLUT_BITMAP_TIMES_ROMAN_24, "Hello");
glLineWidth(2);
/*
glBegin(GL_LINES);
glColor3f(0.0f, 0.0f, 0.0f);

glVertex2f(1.00f, 0.00f);
glVertex2f(-1.00f, 0.00f);
glVertex2f(0.00f, 1.00f);
glVertex2f(0.00f, -1.00f);
glEnd();
*/

glBegin(GL_POLYGON);

glColor3f(0.15f, 0.62f, 0.2f);
glVertex2f(-1.0f, -0.1f);
glVertex2f(1.0f, -0.1f);
glVertex2f(1.0f, -1.0f);
glVertex2f(-1.0f, -1.0f);
glVertex2f(-1.0f, -0.1f);
glEnd();

glBegin(GL_POLYGON);

glColor3f(0.0f, 0.0f, 0.0f);
glVertex2f(0.0f, -0.1f);
glVertex2f(1.0f, -0.1f);
glVertex2f(0.5f, 0.5f);
glVertex2f(0.0f, -0.1f);
glEnd();

glBegin(GL_POLYGON);

glColor3f(0.0f, 0.0f, 0.0f);
glVertex2f(0.0f, -0.1f);
glVertex2f(-1.0f, -0.1f);
glVertex2f(-.5f, 0.5f);
glVertex2f(0.0f, -0.1f);
glEnd();

glBegin(GL_POLYGON);

glColor3f(0.0f, 0.33f, 0.04f);

glVertex2f(-0.7f, 0.05f);
glVertex2f(-0.85f, -0.15f);
glVertex2f(-0.55f, -0.15f);

glVertex2f(-0.85f, -0.15f);
glVertex2f(-0.55f, -0.15f);

glVertex2f(-0.8f, -0.15f);
glVertex2f(-0.6f, -0.15f);
glVertex2f(-0.85f, -0.2f);
glVertex2f(-0.55f, -0.2f);

glVertex2f(-0.85f, -0.25f);
glVertex2f(-0.55f, -0.25f);


glVertex2f(-0.85f, -0.35f);
glVertex2f(-0.55f, -0.35f);

glEnd();


glBegin(GL_POLYGON);
glColor3f(0.33f, 0.17f, 0.00f);
glVertex2f(-0.74f, -0.35f);
glVertex2f(-0.66f, -0.35f);
glVertex2f(-0.66f, -0.7f);
glVertex2f(-0.74f, -0.7f);
glVertex2f(-0.74f, -0.35f);

glEnd();

glBegin(GL_POLYGON);
glColor3f(0.96f, 1.0f, 0.35f);

glVertex2f(-0.25f, -0.50f);
glVertex2f(0.35f, -0.50f);
glVertex2f(0.35f, -0.75f);
glVertex2f(-0.25f, -0.75f);
glVertex2f(-0.25f, -0.50f);
glEnd();

glBegin(GL_POLYGON);
glColor3f(0.0f, 0.0f, 0.0f);

glVertex2f(-0.05f, -0.60f);
glVertex2f(0.15f, -0.60f);
glVertex2f(0.15f, -0.75f);
glVertex2f(-0.05f, -0.75f);
glVertex2f(-0.05f, -0.60f);
glEnd();



glBegin(GL_POLYGON);
glColor3f(0.52f, 0.27f, 0.0f);

glVertex2f(-0.2f, -0.4f);
glVertex2f(0.25f, -0.4f);
glVertex2f(0.35f, -0.5f);
glVertex2f(-0.3f, -0.5f);
glVertex2f(-0.2f, -0.4f);

glEnd();


glBegin(GL_POLYGON);
glColor3f(0.37f, 0.19f, 0.0f);
glVertex2f(0.25f, -0.4f);
glVertex2f(0.35f, -0.5f);
glVertex2f(0.85f, -0.1f);
glVertex2f(0.7f, -0.05f);
glVertex2f(0.25f, -0.4f);
glEnd();


glBegin(GL_POLYGON);

glColor3f(0.88f, 0.82f, 0.15f);

glVertex2f(0.35f, -0.75f);
glVertex2f(0.35f, -0.5f);
glVertex2f(0.85f, -0.1f);
glVertex2f(0.85f, -0.3f);
glVertex2f(0.35f, -0.75f);
glEnd();

glBegin(GL_POLYGON);

glColor3f(0.88f, 0.82f, 0.15f);

glVertex2f(0.25f, -0.4f);
glVertex2f(0.25f, -0.2f);

glVertex2f(0.7f, 0.15f);
glVertex2f(0.7f, -0.05f);
glVertex2f(0.25f, -0.4f);
glEnd();


glBegin(GL_POLYGON);
glColor3f(0.96f, 1.0f, 0.35f);

glVertex2f(0.25f, -0.4f);
glVertex2f(0.25f, -0.2f);

glVertex2f(-0.2f, -0.2f);
glVertex2f(-0.2f, -0.4f);
glVertex2f(0.25f, -0.4f);
glEnd();


glBegin(GL_POLYGON);
glColor3f(0.0f, 0.0f, 0.0f);

glVertex2f(-0.1f, -0.25f);
glVertex2f(-0.1f, -0.325f);
glVertex2f(0.15f, -0.325f);
glVertex2f(0.15f, -0.25f);
glVertex2f(-0.1f, -0.25f);
glEnd();

glBegin(GL_POLYGON);
glColor3f(0.52f, 0.27f, 0.0f);

glVertex2f(-0.25f, -0.15f);
glVertex2f(-0.25f, -0.2f);
glVertex2f(0.3f, -0.2f);
glVertex2f(0.3f, -0.15f);

glEnd();


glBegin(GL_POLYGON);
glColor3f(0.37f, 0.19f, 0.0f);
glVertex2f(0.3f, -0.2f);
glVertex2f(0.3f, -0.15f);

glVertex2f(0.725f, 0.2f);
glVertex2f(0.727f, 0.15f);
glEnd();


glBegin(GL_POLYGON);
glColor3f(0.37f, 0.19f, 0.0f);

glVertex2f(-0.25f, -0.15f);
glVertex2f(-0.15f, -0.15f);

glVertex2f(0.2f, 0.15f);
glVertex2f(0.2f, 0.2f);
glVertex2f(-0.25f, -0.15f);

glEnd();

glBegin(GL_POLYGON);
glColor3f(0.37f, 0.19f, 0.0f);
glVertex2f(0.2f, 0.15f);
glVertex2f(0.2f, 0.2f);
glVertex2f(0.725f, 0.2f);
glVertex2f(0.727f, 0.15f);
glVertex2f(0.2f, 0.15f);

glEnd();

glBegin(GL_POLYGON);
glColor3f(0.55f, 0.55f, 0.55f);

glVertex2f(-0.15f, -0.15f);
glVertex2f(0.3f, -0.15f);
glVertex2f(0.67f, 0.15f);
glVertex2f(0.2f, 0.15f);
glVertex2f(-0.15f, -0.15f);

glEnd();



/*
GLfloat x=0.4f; GLfloat y=0.4f; GLfloat radius =0.2f;
	int i;
	int lineAmount = 100; //# of triangles used to draw circle

	//GLfloat radius = 0.8f; //radius
	GLfloat twicePi = 2.0f * PI;
glBegin(GL_POLYGON);
glColor3f(0.37f, 0.19f, 0.0f);
glVertex2f(0.25f, -0.4f);
glVertex2f(0.35f, -0.5f);
glVertex2f(0.85f, -0.1f);
glVertex2f(0.7f, -0.05f);
glVertex2f(0.25f, -0.4f);
glEnd();
    glColor3f(0.0f, 1.0f, 1.0f);
	glBegin(GL_LINE_LOOP);
		for(i = 0; i <= lineAmount;i++) {
			glVertex2f(
			    x + (radius * cos(i *  twicePi / lineAmount)),
			    y + (radius* sin(i * twicePi / lineAmount))
			);
		}
	glEnd();
*/
 glFlush(); // Render now
}

/* Main function: GLUT runs as a console application starting at main() */
int main(int argc, char** argv) {
glutInit(&argc, argv);
glutInitWindowSize(1080, 1200); // Set the window's initial width & height
glutCreateWindow("OpenGL Setup Test"); // Create a window with the given title
glutDisplayFunc(display); // Register display callback handler for window re-paint
glutMainLoop(); // Enter the event-processing loop
return 0;
}
